{"identifier":{"url":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/NavigatorIndex\/readNavigatorTree(timeout:delay:queue:broadcast:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/swiftdocc\/navigatorindex\/readnavigatortree(timeout:delay:queue:broadcast:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"readNavigatorTree"},{"kind":"text","text":"("},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TimeInterval","preciseIdentifier":"c:@T@NSTimeInterval","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"delay"},{"kind":"text","text":": "},{"text":"TimeInterval","kind":"typeIdentifier","preciseIdentifier":"c:@T@NSTimeInterval"},{"kind":"text","text":" = 0.01, "},{"kind":"externalParam","text":"queue"},{"text":": ","kind":"text"},{"text":"DispatchQueue","preciseIdentifier":"c:objc(cs)OS_dispatch_queue","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"broadcast","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NavigatorTree","identifier":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/NavigatorTree","preciseIdentifier":"s:9SwiftDocC13NavigatorTreeC","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:9SwiftDocC13NavigatorTreeC17BroadcastCallbacka","kind":"typeIdentifier","text":"BroadcastCallback","identifier":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/NavigatorTree\/BroadcastCallback"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"throws"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"timeout","content":[{"type":"paragraph","inlineContent":[{"text":"The amount of time we can load a batch of items from data, once the timeout time pass,","type":"text"},{"text":" ","type":"text"},{"text":"the reading process will reschedule asynchronously using the given queue.","type":"text"}]}]},{"name":"delay","content":[{"inlineContent":[{"text":"The delay to wait before schedule the next read. Default: 0.01 seconds.","type":"text"}],"type":"paragraph"}]},{"name":"queue","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The queue to use."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The callback to update get updates of the current process.","type":"text"}]}],"name":"broadcast"}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"Do not access the navigator tree root node or the map from identifier to node from a different thread than the one the queue is using while the read is performed,"},{"text":" ","type":"text"},{"type":"text","text":"this may cause data inconsistencies. For that please use the broadcast callback that notifies which items have been loaded."}],"type":"paragraph"}],"style":"note","name":"Note"}]}],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"symbolKind":"method","title":"readNavigatorTree(timeout:delay:queue:broadcast:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"readNavigatorTree","kind":"identifier"},{"text":"(","kind":"text"},{"text":"timeout","kind":"externalParam"},{"kind":"text","text":": "},{"text":"TimeInterval","kind":"typeIdentifier","preciseIdentifier":"c:@T@NSTimeInterval"},{"kind":"text","text":", "},{"kind":"externalParam","text":"delay"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"TimeInterval","preciseIdentifier":"c:@T@NSTimeInterval"},{"kind":"text","text":", "},{"text":"queue","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"DispatchQueue","preciseIdentifier":"c:objc(cs)OS_dispatch_queue","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"broadcast","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9SwiftDocC13NavigatorTreeC","text":"NavigatorTree","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"BroadcastCallback","preciseIdentifier":"s:9SwiftDocC13NavigatorTreeC17BroadcastCallbacka"},{"text":"?) ","kind":"text"},{"text":"throws","kind":"keyword"}],"modules":[{"name":"SwiftDocC"}],"roleHeading":"Instance Method","externalID":"s:9SwiftDocC14NavigatorIndexC04readC4Tree7timeout5delay5queue9broadcastySd_SdSo012OS_dispatch_I0CySayAA0cF0C4NodeCG_SbAL5ErrorOSgtcSgtKF"},"abstract":[{"type":"text","text":"Read a tree on disk from a given path."},{"type":"text","text":" "},{"text":"The read is atomically performed, which means it reads all the content of the file from the disk and process the tree from loaded data.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The queue is used to load the data for a given timeout period, after that, the queue is used to schedule another read after a given delay."},{"type":"text","text":" "},{"type":"text","text":"This approach ensures that the used  queue doesn’t stall while loading the content from the disk keeping the used queue responsive."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC","doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/DocumentationIndexing","doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/NavigatorIndex"]]},"references":{"doc://swift-docc.SwiftDocC/documentation/SwiftDocC":{"role":"collection","abstract":[{"type":"text","text":"Combine code comments with markup prose to produce structured, semantic documentation."}],"kind":"symbol","identifier":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC","type":"topic","url":"\/documentation\/swiftdocc","title":"SwiftDocC"},"doc://swift-docc.SwiftDocC/documentation/SwiftDocC/DocumentationIndexing":{"url":"\/documentation\/swiftdocc\/documentationindexing","title":"Documentation Indexing","kind":"article","abstract":[{"type":"text","text":"Create documentation indexes optimized for text search or navigation."}],"identifier":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/DocumentationIndexing","type":"topic","role":"collectionGroup"},"doc://swift-docc.SwiftDocC/documentation/SwiftDocC/NavigatorIndex/readNavigatorTree(timeout:delay:queue:broadcast:)":{"kind":"symbol","identifier":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/NavigatorIndex\/readNavigatorTree(timeout:delay:queue:broadcast:)","abstract":[{"type":"text","text":"Read a tree on disk from a given path."},{"text":" ","type":"text"},{"text":"The read is atomically performed, which means it reads all the content of the file from the disk and process the tree from loaded data.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The queue is used to load the data for a given timeout period, after that, the queue is used to schedule another read after a given delay."},{"type":"text","text":" "},{"text":"This approach ensures that the used  queue doesn’t stall while loading the content from the disk keeping the used queue responsive.","type":"text"}],"title":"readNavigatorTree(timeout:delay:queue:broadcast:)","role":"symbol","url":"\/documentation\/swiftdocc\/navigatorindex\/readnavigatortree(timeout:delay:queue:broadcast:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"readNavigatorTree","kind":"identifier"},{"kind":"text","text":"("},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"c:@T@NSTimeInterval","text":"TimeInterval"},{"kind":"text","text":", "},{"text":"delay","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"TimeInterval","preciseIdentifier":"c:@T@NSTimeInterval"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"queue"},{"kind":"text","text":": "},{"text":"DispatchQueue","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)OS_dispatch_queue"},{"kind":"text","text":", "},{"text":"broadcast","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NavigatorTree","kind":"typeIdentifier","preciseIdentifier":"s:9SwiftDocC13NavigatorTreeC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:9SwiftDocC13NavigatorTreeC17BroadcastCallbacka","text":"BroadcastCallback"},{"text":"?) ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic"},"doc://swift-docc.SwiftDocC/documentation/SwiftDocC/NavigatorTree/BroadcastCallback":{"kind":"symbol","abstract":[{"text":"The broadcast callback notifies a listener about the latest items loaded from the disk.","type":"text"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"BroadcastCallback","kind":"identifier"}],"url":"\/documentation\/swiftdocc\/navigatortree\/broadcastcallback","role":"symbol","title":"NavigatorTree.BroadcastCallback","identifier":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/NavigatorTree\/BroadcastCallback","navigatorTitle":[{"kind":"identifier","text":"BroadcastCallback"}],"type":"topic"},"doc://swift-docc.SwiftDocC/documentation/SwiftDocC/NavigatorTree":{"title":"NavigatorTree","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"NavigatorTree"},{"type":"text","text":" is a class holding information about a tree of data that can be navigated using a tree navigator."}],"identifier":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/NavigatorTree","role":"symbol","kind":"symbol","url":"\/documentation\/swiftdocc\/navigatortree","type":"topic","navigatorTitle":[{"text":"NavigatorTree","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigatorTree","kind":"identifier"}]},"doc://swift-docc.SwiftDocC/documentation/SwiftDocC/NavigatorIndex":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigatorIndex","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol","title":"NavigatorIndex","abstract":[{"text":"A ","type":"text"},{"code":"NavigatorIndex","type":"codeVoice"},{"type":"text","text":" contains all the necessary information to display the data inside a navigator."},{"type":"text","text":" "},{"type":"text","text":"The data ranges from the tree to the necessary pieces of information to filter the content and perform actions in a fast way."},{"type":"text","text":" "},{"type":"text","text":"A navigator index is created per bundle and needs a bundle identifier to correctly work. Anonymous bundles are allowed, but they limit"},{"type":"text","text":" "},{"type":"text","text":"the functionalities of the index."}],"url":"\/documentation\/swiftdocc\/navigatorindex","identifier":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/NavigatorIndex","navigatorTitle":[{"kind":"identifier","text":"NavigatorIndex"}]}}}