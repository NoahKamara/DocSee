{"hierarchy":{"paths":[["doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC"]]},"sections":[],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/Utilities","doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/Communication"],"anchor":"Utilities-and-Communication","title":"Utilities and Communication"}],"abstract":[{"type":"text","text":"Perform concurrent work on the DocC model."}],"kind":"article","metadata":{"title":"Concurrency","modules":[{"name":"SwiftDocC"}],"roleHeading":"Article","role":"article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftdocc\/concurrency"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/Concurrency"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"DocC is, generally speaking, performing a sequence of operations on a set of documentation topics. Since the compilation is a pipeline, you mostly do work serially as each stage’s input is the previous stage’s output."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"When working serially becomes a bottleneck, use a suitable method from a small number of ","type":"text"},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" extensions that synchronously perform concurrent work on multiple threads but keep the complexity of your code manageable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The preferred way to concurrently perform work is to have a function called from within the main queue, perform concurrent operations inside the function, and return the aggregated results, keeping the concurrency within the local scope of the function."}]},{"type":"paragraph","inlineContent":[{"text":"When you would like to concurrently perform work on a collection of inputs you have a choice between:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"Collection.concurrentPerform(batches:block:)","type":"codeVoice"},{"type":"text","text":" concurrently perform a block of code over the collection elements. A concurrent alternative to "},{"type":"codeVoice","code":"Collection.forEach(_:)"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Collection.concurrentPerform(batches:block:) -> [Result]","type":"codeVoice"},{"type":"text","text":" concurrently perform a block over the collection elements and optionally return an arbitrary amount of results returned in no particular order."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Collection.concurrentMap(batches:block:) -> [Result]","type":"codeVoice"},{"text":" concurrently convert the collection elements; the returned results are in the collection’s original order. A concurrent alternative to ","type":"text"},{"type":"codeVoice","code":"Collection.map(_:)"},{"type":"text","text":"."}]}]}]},{"inlineContent":[{"text":"To concurrently convert a set of elements and preserve the order in the results use:","type":"text"}],"type":"paragraph"},{"code":["let results: [Int] = [1, 2, 3, 4].concurrentMap {","  return $0 * 2","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To return an arbitrary amount of results in no particular order use:"}]},{"type":"codeListing","syntax":"swift","code":["let errors: [Error] = [1, 2, 3, 4].concurrentPerform { element, results in","  if element % 2 == 0 {","    results.append(MyError.evenInput)","  }","}"]}]}],"references":{"doc://swift-docc.SwiftDocC/documentation/SwiftDocC/Communication":{"url":"\/documentation\/swiftdocc\/communication","abstract":[{"text":"Offer native integration of DocC in your IDE.","type":"text"}],"role":"collectionGroup","title":"Communication Bridge","type":"topic","kind":"article","identifier":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/Communication"},"doc://swift-docc.SwiftDocC/documentation/SwiftDocC/Utilities":{"identifier":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC\/Utilities","url":"\/documentation\/swiftdocc\/utilities","title":"Utility APIs","abstract":[],"role":"collectionGroup","kind":"article","type":"topic"},"doc://swift-docc.SwiftDocC/documentation/SwiftDocC":{"role":"collection","abstract":[{"type":"text","text":"Combine code comments with markup prose to produce structured, semantic documentation."}],"kind":"symbol","identifier":"doc:\/\/swift-docc.SwiftDocC\/documentation\/SwiftDocC","type":"topic","url":"\/documentation\/swiftdocc","title":"SwiftDocC"}}}