{"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"code":["This doesn't specify any syntax'"],"syntax":null,"type":"codeListing"},{"type":"codeListing","code":["#!\/bin\/bash","echo \"Hello, World!\"","ls -l | grep \"\\.txt$\""],"syntax":"bash"},{"syntax":"c","code":["#include <stdio.h>","int main() {","    printf(\"Hello, World!\\n\");","    return 0;","}"],"type":"codeListing"},{"type":"codeListing","syntax":"cpp","code":["#include <iostream>","int main() {","    std::cout << \"Hello, World!\" << std::endl;","    return 0;","}"]},{"syntax":"css","code":["body {","  font-family: Arial, sans-serif;","  background-color: #f0f0f0;","}"],"type":"codeListing"},{"syntax":"scss","code":["$primary-color: #3498db;",".button {","  background-color: $primary-color;","  &:hover { opacity: 0.8; }","}"],"type":"codeListing"},{"type":"codeListing","syntax":"diff","code":["- This line is removed","+ This line is added","This line is unchanged"]},{"syntax":"http","type":"codeListing","code":["GET \/api\/users HTTP\/1.1","Host: example.com","Accept: application\/json"]},{"type":"codeListing","code":["public class HelloWorld {","  public static void main(String[] args) {","    System.out.println(\"Hello, World!\");","  }","}"],"syntax":"java"},{"syntax":"javascript","code":["function greet(name) {","  console.log(`Hello, ${name}!`);","}","greet(\"World\");"],"type":"codeListing"},{"type":"codeListing","syntax":"json","code":["{","  \"name\": \"John Doe\",","  \"age\": 30,","  \"city\": \"New York\"","}"]},{"syntax":"llvm","type":"codeListing","code":["define i32 @main() {","  %1 = call i32 @puts(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str, i32 0, i32 0))","  ret i32 0","}"]},{"syntax":"markdown","code":["# Hello, World!","This is a **bold** text and this is *italic*.","[Link to Google](https:\/\/www.google.com)"],"type":"codeListing"},{"syntax":"objectivec","type":"codeListing","code":["#import <Foundation\/Foundation.h>","int main(int argc, const char * argv[]) {","  NSLog(@\"Hello, World!\");","  return 0;","}"]},{"code":["#!\/usr\/bin\/perl","use strict;","use warnings;","print \"Hello, World!\\n\";"],"type":"codeListing","syntax":"perl"},{"type":"codeListing","syntax":"php","code":["<?php","  echo \"Hello, World!\";","  phpinfo();","?>"]},{"code":["def greet(name):","    return f\"Hello, {name}!\"","print(greet(\"World\"))"],"syntax":"python","type":"codeListing"},{"syntax":"ruby","code":["def greet(name)","  puts \"Hello, #{name}!\"","end","greet(\"World\")"],"type":"codeListing"},{"syntax":"shell","type":"codeListing","code":["$ echo \"Hello, World!\"","$ ls -l | grep \"\\.txt$\""]},{"type":"codeListing","syntax":"swift","code":["func greet(name: String) -> String {","    return \"Hello, \\(name)!\"","}","print(greet(name: \"World\"))"]},{"code":["<?xml version=\"1.0\" encoding=\"UTF-8\"?>","    <greeting>","    <message>Hello, World!<\/message>","<\/greeting>"],"syntax":"xml","type":"codeListing"},{"syntax":"metal","code":["#include <metal_stdlib>","using namespace metal;","kernel void add_arrays(device const float* inA,","device const float* inB,","device float* result,","uint index [[thread_position_in_grid]])","{","    result[index] = inA[index] + inB[index];","}"],"type":"codeListing"}]}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/TestDocumentation\/documentation\/TestDocumentation\/CodeListing"},"metadata":{"title":"Code","modules":[{"name":"TestDocumentation"}],"roleHeading":"Article","role":"article"},"seeAlsoSections":[{"identifiers":["doc:\/\/TestDocumentation\/documentation\/TestDocumentation\/Paragraph","doc:\/\/TestDocumentation\/documentation\/TestDocumentation\/List","doc:\/\/TestDocumentation\/documentation\/TestDocumentation\/Table","doc:\/\/TestDocumentation\/documentation\/TestDocumentation\/Aside"],"generated":true}],"abstract":[{"text":"Each example demonstrates how to properly format code snippets within DocC","type":"text"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/testdocumentation\/codelisting"]}],"hierarchy":{"paths":[["doc:\/\/TestDocumentation\/documentation\/TestDocumentation","doc:\/\/TestDocumentation\/documentation\/TestDocumentation\/Blocks"]]},"references":{"doc://TestDocumentation/documentation/TestDocumentation/Table":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Markdown Table Formatting"}],"identifier":"doc:\/\/TestDocumentation\/documentation\/TestDocumentation\/Table","title":"Table","url":"\/documentation\/testdocumentation\/table","kind":"article"},"doc://TestDocumentation/documentation/TestDocumentation":{"identifier":"doc:\/\/TestDocumentation\/documentation\/TestDocumentation","title":"TestDocumentation","type":"topic","abstract":[],"url":"\/documentation\/testdocumentation","kind":"symbol","role":"collection"},"doc://TestDocumentation/documentation/TestDocumentation/Paragraph":{"type":"topic","role":"article","title":"Paragraph","kind":"article","abstract":[{"text":"A paragraph is just a list of inline text","type":"text"}],"url":"\/documentation\/testdocumentation\/paragraph","identifier":"doc:\/\/TestDocumentation\/documentation\/TestDocumentation\/Paragraph"},"doc://TestDocumentation/documentation/TestDocumentation/List":{"url":"\/documentation\/testdocumentation\/list","role":"article","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/TestDocumentation\/documentation\/TestDocumentation\/List","title":"Lists"},"doc://TestDocumentation/documentation/TestDocumentation/Aside":{"url":"\/documentation\/testdocumentation\/aside","role":"article","kind":"article","identifier":"doc:\/\/TestDocumentation\/documentation\/TestDocumentation\/Aside","type":"topic","abstract":[{"text":"There may be circumstances when you want to get the readerâ€™s attention to provide additional advice, or to warn them about common errors or requisite configuration. For those situations, use an aside.","type":"text"}],"title":"Aside"},"doc://TestDocumentation/documentation/TestDocumentation/Blocks":{"title":"Block Content","role":"collectionGroup","url":"\/documentation\/testdocumentation\/blocks","abstract":[{"type":"text","text":"Blocks of content that should be displayed vertically"}],"kind":"article","type":"topic","identifier":"doc:\/\/TestDocumentation\/documentation\/TestDocumentation\/Blocks"}}}